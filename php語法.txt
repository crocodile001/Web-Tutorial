
html聲明 : 

	<!DOCTYPE html>

	<meta charset="utf-8"/>


php聲明 :
	
	<?= 相當於 <?php echo

	聲明php與瀏覽器的交互編碼(一般放在第一行) : header('Content-Type:text/html;charset=utf-8');


變量 :
	給予、修改變量 : $變量名 = 變量值 or $變量名 = $變量名;

	傳變量地址 : $變量名 = &$變量名;

	刪除變量 : unset($變量名);

	檢測變量 : isset($變量名);

	輸出變量的長度、類型、值(用於debug) : var_dump();

	$this 是系統保留變量


已定義的可變變量 :
	
	可變變量 : 將已定義的變量值作為變量名  $$變量名 = 變量值;


字串串接 :

	將陣列中的元素用'--'串聯成字串 : implode('--',$fav);	// fav是陣列 ; '--'可以更改

	字串運算符 : 字串.字串


常量 :
	
	define('常量名','常量值');

	使用常量 : echo 常量名;	(不用$)

	檢測常量 : defined('常量名');


	魔術常量 : 以常量出現，但其值會變動


進制 :
	
	base_convert();	// 在任意進制之間轉換

	base_convert('10100',2,16);


字串類型 : 

	1.單引號 : 不能顯示變量值，寫什麼就顯示什麼; 	($str='hello $a';)	

	   	   不能轉譯字串;			($str='hello\t';)

	2.雙引號 : 能顯示變量值;			($str='hello $a';)	
		
	   	   能轉譯字串;				($str='hello\t';)

	如果變量名和內容沒有空隙，可以使用{}將變量強制轉譯   ($str='hello{$a}';)

	用單引號速度較快

	3.heredoc : 		能顯示變量值和轉譯字串;
		
		$str=<<<XXX	(XXX可以換)
			字串內容
		XXX;

	4.Nowdoc :		不能顯示變量值和轉譯字串;
		
		$str=<<<'XXX'	(XXX可以換)
			字串內容
		'XXX';

	heredoc和Nowdoc : 定義多行字串


數組 :

	索引數組(數字索引,以數字做為鍵名) :

		定義數組 : $數組名=array(數組元素1,數組元素n);

		使用數組 : $數組名[鍵名];

		$arr=array('a','張三',50,6=>true);	(用=>指定鍵名,否則自動分配)

		var_dump($arr);

	關連數組(字符索引,以字串做為鍵名) :

		定義數組 : $數組名=array('鍵名1'=>數組元素1,'鍵名n'=>數組元素n);

		使用數組 : $數組名['鍵名']

		$arr=array('name'=>'張三','age'=>50,'married'=>true);

	p.s.	$_GET和$_POST都是關聯數組

	補充 :

		較新版本可以用[]定義數組 : 

			$數組名=[元素1,元素2,元素n];	  

			$數組名=['鍵名1'=>元素1,'鍵名2'=>元素2,'鍵名n'=>元素n];

		新增數組元素 : 

			$數組名[]=元素;

			$arr[]='張三';

			$arr[]=50;

			$arr[]=true;

		新增數組元素 : $數組名[]=新元素值	// 新增的值會自動加入數組末端

		輸出數組 : print_r($數組名);
	
		刪除整個數組 : unset($數組名);

		刪除部分數組 : unset($數組名[鍵]);	// 原本的內容不會重新分配鍵名

		檢測數組 : 

			is_array($數組名);	// 檢測是否為數組

			in_array('字符串',$數組名)

			isset($數組名[鍵名]);	// 只能檢測有沒有定義數組元素的存在，不能確定是否為數組		


運算符 :

	比較運算符 :
		
		<=>(結合比較運算符) : 

			a<=>b :

			a大 => 1

			b大 => -1

			a=b => 0  

	條件運算符 :

		空合併運算符(php7) :		(重要 : 可以用於設置默認值)

			表達式1 ?? 表達式n	(從第一個表達式開始找，直到返回第一個不為NULL的值，若沒有則返回NULL)

	邏輯運算符 :

		|| : 不能快捷運算

		or(短路運算符) : 能快捷運算

	賦值運算符 :
	
		.=

流程控制 :

	if條件語句 :

		if
		elseif
		else

	替代語法(模板語法) :  { 用 : 替代， } 用 endif,endwhile,endfor,endforeach... 替代


文件加載 (通常用來加載網頁公共部分):

	include 文件地址
		
		用法1 : include '文件路徑';

		用法2 : include('文件路徑');

	require_once 文件地址

	include文件地址

	include_once 文件地址

	include和require的區別 : 

		include出錯時，顯示警告，後面繼續執行

		require出錯時，顯示致命警告，後面不繼續執行

	include(require)和include_once(require_once)的區別 : 

		include載入多少次，文件就執行多少次

		include_once載入多少次，文件就只執行一次

	p.s. 
		
		1.在團隊開發時，經常會使用once的寫法

		2.載入文件時，通常使用相對路徑，不要忽略./


函數 :

	定義語法 : 

		function 函數名子(){
			內容
		}

	return :

		可以寫 return[$a,$b]; , 返回值會以數組的形式回傳

	若不確定傳入函數的參數值數量，可以不設置形式參數，實際參數可以任意設置數量 :

		fumction add(){

			$arr=func_get_args();

			for( $i=0 ; $i<count($arr) ; $i++ )

				$result+=$arr[$i];

			return $result;
			
		}

		add(1,2,3,4,5);			

	傳地址 :
	
		function show(&$str){
		
			內容;

		}


	可變函數(更改調用函數名，可用於判斷是否使用該函數) :

		function show(){

			echo '123';
		
		}

		$a='show';

		$a();

	匿名函數 (將函數定義作為一個變量值) :

		$a = function(){

			echo '123';

		};

		$a();

	局部變量 : 函數調用完後消失

	全局變量(不能用在函數中) : 執行PHP腳本時定義，腳本結束後或遇到unset()後消失

	超全局變量 : 系統自動定義的變量，任何地方都可以用 ($_GET,$GLOBALS...)

	跨域訪問 :

		1.存入超全局變量(數組) : 

			$str='abc';

			$_GET['str']=$str;

		推薦使用 => 

		2.使用GLOBALS變量 (全局變量會自動存入GLOBALS) :

			$str='abc';

			function show(){				

				echo GLOBALS['str'];
			}

			show();

		3.global關鍵詞 (不同的變量指向相同地址) :

			$str='abc';

			function show(){

				global $str;

				echo $str;

			}
			
			show();

		p.s. 常量沒有區域之分

	靜態局部變量 (函數結束不會消失，腳本結束後或遇到unset()後消失 ; 可用來記錄函數被調用次數) :

		function 函數名(){

			static $變量名=變量值;	(初始化只執行一次，之後調用不會執行)

		}


遍歷數組 :

	一維 :

	 	foreach : 

			完整版 : foreach($數組名 as 賦值鍵名的變量 => 賦值鍵值的變量){
			
				 }

			簡化版 : foreach($數組名 as 賦值鍵值的變量){
			
				 }


			例 :

				foreach($list as $key => $value){

					echo $value.'--';

				}

			引用賦值(其會影響原值) : foreach($數組名 as 賦值鍵名的變量 => &賦值鍵值的變量){	}

				例 :

					foreach($list as $key => &$value){

						echo $value.'--';

					}

		p.s. foreach遍歷的是數組的副本，遍歷其間增加的值，不會在當次遍歷輸出

	二維 :	多個foreach函數嵌套	


list :

	語法 : list(變量1,變量2,變量3,變量n)=$數組名;

	例 :

		list($a,$b,$c)=$arr;

		echo $a;

		or

		list($a,,$b,,$c)=$arr;	(中間的值可以省略不寫 , 但要將空位留出來)

		echo $a;






